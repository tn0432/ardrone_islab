"""autogenerated by genpy from ardrone_islab/Navdataislab.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class Navdataislab(genpy.Message):
  _md5sum = "4b1524d9fde7b4b3834b2c37ed7d4f1c"
  _type = "ardrone_islab/Navdataislab"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header

float32 tm #timestamp
float32 tm_pre
float32 frame

#pitch estimates in radians, positive is pitch down (fly forward)
float32 pitch_w  #=sum(gx * dt)
float32 pitch_a  #=pitch(az,ax)
float32 pitch    #kalman pitch estimate from gy and pitch_a

#roll estimates in radians, positive is roll right (fly rightward)
float32 roll_w    #=sum(gy * dt)
float32 roll_a    #=roll(az,ay)
float32 roll      #kalman roll estimate from gx and roll_a
  
#yaw estimate, positive is yaw left
float32 yaw_w      #=sum(gz * dt)
float32 yaw_m      #=sum(gz * dt)
float32 yaw        #=sum(gz * dt)
  
float64 dt    #time since last navdata sample in sec
float64 dt2
  
float64[4] q_est
float64[3] b_est

#copy of physical navdata values
float64 ts    # navdata timestamp in sec
float32 hraw   # height above ground in [cm] 
float32 h_meas  # 1=height was measured in this sample, 0=height is copy of prev value
float32 ax    # acceleration x-axis in [G] front facing up is positive         
float32 ay    # acceleration y-axis in [G] left facing up is positive                
float32 az    # acceleration z-axis in [G] top facing up is positive  
           
float32 wx    # gyro value x-axis in [rad/sec] right turn, i.e. roll right is positive           
float32 wy    # gyro value y-axis in [rad/sec] right turn, i.e. pirch down is positive                     
float32 wz    # gyro value z-axis in [rad/sec] right turn, i.e. yaw left is positive

float32 magX
float32 magY 
float32 magZ

float32 pressure
float32 rotX
float32 rotY
float32 rotZ

float32 altd

float32 motor1
float32 motor2
float32 motor3
float32 motor4



================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

"""
  __slots__ = ['header','tm','tm_pre','frame','pitch_w','pitch_a','pitch','roll_w','roll_a','roll','yaw_w','yaw_m','yaw','dt','dt2','q_est','b_est','ts','hraw','h_meas','ax','ay','az','wx','wy','wz','magX','magY','magZ','pressure','rotX','rotY','rotZ','altd','motor1','motor2','motor3','motor4']
  _slot_types = ['std_msgs/Header','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float64','float64','float64[4]','float64[3]','float64','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,tm,tm_pre,frame,pitch_w,pitch_a,pitch,roll_w,roll_a,roll,yaw_w,yaw_m,yaw,dt,dt2,q_est,b_est,ts,hraw,h_meas,ax,ay,az,wx,wy,wz,magX,magY,magZ,pressure,rotX,rotY,rotZ,altd,motor1,motor2,motor3,motor4

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Navdataislab, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.tm is None:
        self.tm = 0.
      if self.tm_pre is None:
        self.tm_pre = 0.
      if self.frame is None:
        self.frame = 0.
      if self.pitch_w is None:
        self.pitch_w = 0.
      if self.pitch_a is None:
        self.pitch_a = 0.
      if self.pitch is None:
        self.pitch = 0.
      if self.roll_w is None:
        self.roll_w = 0.
      if self.roll_a is None:
        self.roll_a = 0.
      if self.roll is None:
        self.roll = 0.
      if self.yaw_w is None:
        self.yaw_w = 0.
      if self.yaw_m is None:
        self.yaw_m = 0.
      if self.yaw is None:
        self.yaw = 0.
      if self.dt is None:
        self.dt = 0.
      if self.dt2 is None:
        self.dt2 = 0.
      if self.q_est is None:
        self.q_est = [0.,0.,0.,0.]
      if self.b_est is None:
        self.b_est = [0.,0.,0.]
      if self.ts is None:
        self.ts = 0.
      if self.hraw is None:
        self.hraw = 0.
      if self.h_meas is None:
        self.h_meas = 0.
      if self.ax is None:
        self.ax = 0.
      if self.ay is None:
        self.ay = 0.
      if self.az is None:
        self.az = 0.
      if self.wx is None:
        self.wx = 0.
      if self.wy is None:
        self.wy = 0.
      if self.wz is None:
        self.wz = 0.
      if self.magX is None:
        self.magX = 0.
      if self.magY is None:
        self.magY = 0.
      if self.magZ is None:
        self.magZ = 0.
      if self.pressure is None:
        self.pressure = 0.
      if self.rotX is None:
        self.rotX = 0.
      if self.rotY is None:
        self.rotY = 0.
      if self.rotZ is None:
        self.rotZ = 0.
      if self.altd is None:
        self.altd = 0.
      if self.motor1 is None:
        self.motor1 = 0.
      if self.motor2 is None:
        self.motor2 = 0.
      if self.motor3 is None:
        self.motor3 = 0.
      if self.motor4 is None:
        self.motor4 = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.tm = 0.
      self.tm_pre = 0.
      self.frame = 0.
      self.pitch_w = 0.
      self.pitch_a = 0.
      self.pitch = 0.
      self.roll_w = 0.
      self.roll_a = 0.
      self.roll = 0.
      self.yaw_w = 0.
      self.yaw_m = 0.
      self.yaw = 0.
      self.dt = 0.
      self.dt2 = 0.
      self.q_est = [0.,0.,0.,0.]
      self.b_est = [0.,0.,0.]
      self.ts = 0.
      self.hraw = 0.
      self.h_meas = 0.
      self.ax = 0.
      self.ay = 0.
      self.az = 0.
      self.wx = 0.
      self.wy = 0.
      self.wz = 0.
      self.magX = 0.
      self.magY = 0.
      self.magZ = 0.
      self.pressure = 0.
      self.rotX = 0.
      self.rotY = 0.
      self.rotZ = 0.
      self.altd = 0.
      self.motor1 = 0.
      self.motor2 = 0.
      self.motor3 = 0.
      self.motor4 = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_12f2d.pack(_x.tm, _x.tm_pre, _x.frame, _x.pitch_w, _x.pitch_a, _x.pitch, _x.roll_w, _x.roll_a, _x.roll, _x.yaw_w, _x.yaw_m, _x.yaw, _x.dt, _x.dt2))
      buff.write(_struct_4d.pack(*self.q_est))
      buff.write(_struct_3d.pack(*self.b_est))
      _x = self
      buff.write(_struct_d20f.pack(_x.ts, _x.hraw, _x.h_meas, _x.ax, _x.ay, _x.az, _x.wx, _x.wy, _x.wz, _x.magX, _x.magY, _x.magZ, _x.pressure, _x.rotX, _x.rotY, _x.rotZ, _x.altd, _x.motor1, _x.motor2, _x.motor3, _x.motor4))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 64
      (_x.tm, _x.tm_pre, _x.frame, _x.pitch_w, _x.pitch_a, _x.pitch, _x.roll_w, _x.roll_a, _x.roll, _x.yaw_w, _x.yaw_m, _x.yaw, _x.dt, _x.dt2,) = _struct_12f2d.unpack(str[start:end])
      start = end
      end += 32
      self.q_est = _struct_4d.unpack(str[start:end])
      start = end
      end += 24
      self.b_est = _struct_3d.unpack(str[start:end])
      _x = self
      start = end
      end += 88
      (_x.ts, _x.hraw, _x.h_meas, _x.ax, _x.ay, _x.az, _x.wx, _x.wy, _x.wz, _x.magX, _x.magY, _x.magZ, _x.pressure, _x.rotX, _x.rotY, _x.rotZ, _x.altd, _x.motor1, _x.motor2, _x.motor3, _x.motor4,) = _struct_d20f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_12f2d.pack(_x.tm, _x.tm_pre, _x.frame, _x.pitch_w, _x.pitch_a, _x.pitch, _x.roll_w, _x.roll_a, _x.roll, _x.yaw_w, _x.yaw_m, _x.yaw, _x.dt, _x.dt2))
      buff.write(self.q_est.tostring())
      buff.write(self.b_est.tostring())
      _x = self
      buff.write(_struct_d20f.pack(_x.ts, _x.hraw, _x.h_meas, _x.ax, _x.ay, _x.az, _x.wx, _x.wy, _x.wz, _x.magX, _x.magY, _x.magZ, _x.pressure, _x.rotX, _x.rotY, _x.rotZ, _x.altd, _x.motor1, _x.motor2, _x.motor3, _x.motor4))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 64
      (_x.tm, _x.tm_pre, _x.frame, _x.pitch_w, _x.pitch_a, _x.pitch, _x.roll_w, _x.roll_a, _x.roll, _x.yaw_w, _x.yaw_m, _x.yaw, _x.dt, _x.dt2,) = _struct_12f2d.unpack(str[start:end])
      start = end
      end += 32
      self.q_est = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=4)
      start = end
      end += 24
      self.b_est = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      _x = self
      start = end
      end += 88
      (_x.ts, _x.hraw, _x.h_meas, _x.ax, _x.ay, _x.az, _x.wx, _x.wy, _x.wz, _x.magX, _x.magY, _x.magZ, _x.pressure, _x.rotX, _x.rotY, _x.rotZ, _x.altd, _x.motor1, _x.motor2, _x.motor3, _x.motor4,) = _struct_d20f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3I = struct.Struct("<3I")
_struct_d20f = struct.Struct("<d20f")
_struct_4d = struct.Struct("<4d")
_struct_12f2d = struct.Struct("<12f2d")
_struct_3d = struct.Struct("<3d")
